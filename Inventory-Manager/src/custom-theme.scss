
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();


$Inventory-Manager-primary: mat.define-palette(mat.$light-blue-palette);
$Inventory-Manager-accent: mat.define-palette(mat.$light-green-palette, A200, A100, A400);
$Inventory-Manager-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$Inventory-Manager-theme: mat.define-light-theme((
  color: (
    primary: $Inventory-Manager-primary,
    accent: $Inventory-Manager-accent,
    warn: $Inventory-Manager-warn,
  )
));

//for dark theme
$Inventory-Manager-primary-dark: mat.define-palette(mat.$orange-palette);
$Inventory-Manager-accent-dark: mat.define-palette(mat.$yellow-palette, A200, A100, A400);
$Inventory-Manager-warn-dark: mat.define-palette(mat.$red-palette);


$Inventory-Manager-darktheme: mat.define-dark-theme((
  color: (
    primary: $Inventory-Manager-primary-dark,
    accent: $Inventory-Manager-accent-dark,
    warn: $Inventory-Manager-warn-dark,
  )
));


// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($Inventory-Manager-theme);


.dark-theme-mode {
  @include mat.all-component-themes($Inventory-Manager-darktheme);
}